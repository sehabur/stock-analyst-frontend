"use client";
import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { marked } from "marked";

import {
  Grid,
  Typography,
  Box,
  Paper,
  useTheme,
  useMediaQuery,
  Divider,
  Autocomplete,
  TextField,
} from "@mui/material";
import ToggleButton from "@mui/material/ToggleButton";
import ToggleButtonGroup, {
  toggleButtonGroupClasses,
} from "@mui/material/ToggleButtonGroup";
import { styled } from "@mui/material/styles";

import PremiumDialogContent from "@/components/shared/PremiumDialogContent";
import "./ai.css";

const StyledLanguageToggleButtonGroup = styled(ToggleButtonGroup)(
  ({ theme }) => ({
    [`& .${toggleButtonGroupClasses.grouped}`]: {
      margin: theme.spacing(0.5),
      border: 0,
      borderRadius: theme.shape.borderRadius,
      [`&.${toggleButtonGroupClasses.disabled}`]: {
        border: 0,
      },
    },
  })
);

const StyledLanguageToggleButton = styled(ToggleButton)(({ theme }) => ({
  "&.MuiToggleButtonGroup-grouped": {
    borderRadius: "5px !important",
    width: "75px",
    "&.Mui-selected": {
      color: theme.palette.background.default,
      backgroundColor: theme.palette.text.secondary,
    },
  },
  color: theme.palette.text.primary,
}));

const StyledToggleButtonGroup = styled(ToggleButtonGroup)(({ theme }) => ({
  [`& .${toggleButtonGroupClasses.grouped}`]: {
    border: 0,
  },
}));
const StyledToggleButton = styled(ToggleButton)(({ theme }) => ({
  "&.MuiToggleButtonGroup-grouped": {
    borderRadius: "5px !important",
    border: `1px solid lightgrey !important`,
    "&.Mui-selected": {
      color: theme.palette.background.default,
      backgroundColor: theme.palette.text.secondary,
    },
  },
  color: theme.palette.text.primary,
}));

const options: any = [
  {
    buttonText: "General info",
    buttonTextSmall: "Info",
    queryType: "general",
    dataTitle: "general",
  },
  {
    buttonText: "Fair value",
    buttonTextSmall: "Fair value",
    queryType: "fairValue",
    dataTitle: "fairValue",
  },
  {
    buttonText: "Strength",
    buttonTextSmall: "Strength",
    queryType: "strength",
    dataTitle: "fundamentalRatio",
  },
  {
    buttonText: "Weakness",
    buttonTextSmall: "Weakness",
    queryType: "weakness",
    dataTitle: "fundamentalRatio",
  },
  {
    buttonText: "Technical",
    buttonTextSmall: "Technical",
    queryType: "technical",
    dataTitle: "technical",
  },
  {
    buttonText: "Financial",
    buttonTextSmall: "Financial",
    queryType: "financial",
    dataTitle: "financial",
  },
];

const initdata: any = {
  general: {
    En: "<p>Welocme to AI based anlysis of the stocks!</p><p>The information presented here is generated by AI models based on actual data of stocks. Your caution is required before taking any action. Also these are merely insights and are not meant to be any direct investment suggestion.</p>",
    Bn: "<p>AI-ভিত্তিক স্টক বিশ্লেষণে স্বাগতম!</p><p>এখানে প্রদত্ত তথ্যগুলো AI মডেলের মাধ্যমে স্টকগুলোর প্রকৃত ডেটা ব্যবহার করে তৈরি করা হয়েছে। কোনো পদক্ষেপ নেওয়ার আগে অনুগ্রহ করে সতর্ক থাকুন। এগুলো শুধুমাত্র বিশ্লেষণ এবং সরাসরি বিনিয়োগের পরামর্শ নয়।</p>",
  },
  strength: { En: null, Bn: null },
  weakness: { En: null, Bn: null },
  technical: { En: null, Bn: null },
  financial: { En: null, Bn: null },
  fairValue: { En: null, Bn: null },
};

export default function AiGeneratedInsight(props: any) {
  const {
    technicals,
    fundamentals,
    epsCurrent,
    pe,
    pbv,
    pcf,
    cashDividend,
    price,
    tradingCode,
  } = props;

  const theme = useTheme();

  const matchesMdUp = useMediaQuery(theme.breakpoints.up("md"));

  const auth = useSelector((state: any) => state.auth);

  const [data, setdata] = useState<any>(initdata);

  const [alignment, setAlignment] = useState("general");

  const [languageAlignment, setLanguageAlignment] = useState("En");

  const [doc, setDoc] = useState<any>();

  const handleAlignmentChange = (
    event: React.MouseEvent<HTMLElement>,
    newAlignment: string
  ) => {
    if (newAlignment !== null) {
      setAlignment(newAlignment);
    }
  };

  const handleLanguageAlignmentChange = (
    event: React.MouseEvent<HTMLElement>,
    newAlignment: string
  ) => {
    if (newAlignment !== null) {
      setLanguageAlignment(newAlignment);
    }
  };

  const getQueryDataBody = () => {
    return {
      technical: {
        betaOneYear: technicals?.beta,
        movingAverages: technicals?.movingAverages,
        oscillators: technicals?.oscillators,
        supportAndResistance: technicals?.pivots,
        candlestick: technicals?.candlestick?.value,
        currency: "BDT",
      },
      fundamentalRatio: {
        priceToEarningRatio: pe?.toFixed(2),
        priceToBookValueRatio: pbv?.toFixed(2),
        earningsPerShare: epsCurrent?.toFixed(2),
        priceToSalesRatio: fundamentals?.ps?.value?.toFixed(2),
        debtToEquityRatio: fundamentals?.de?.value?.toFixed(2),
        returnOfEquity: fundamentals?.roe?.value?.toFixed(2),
        returnOfAssets: fundamentals?.roa?.value?.toFixed(2),
        dividendYield: fundamentals?.dividendYield?.value?.toFixed(2),
        currentRatio: fundamentals?.currentRatio?.value?.toFixed(2),
        netIncomeRatio: fundamentals?.netIncomeRatio?.value?.toFixed(2),
        NetOperatingCashFlowPerShare:
          fundamentals?.nocfpsQuarterly?.value?.toFixed(2),
        NetAssetValue: fundamentals?.navQuarterly?.value?.toFixed(2),
        currency: "BDT",
      },
      financial: {
        reserveAndSurplus: fundamentals?.reserveSurplus?.value * 1000000,
        bookValue: fundamentals?.bookValue?.value,
        totalLiabilities: fundamentals?.totalLiabilities?.value,
        netIncome: fundamentals?.netIncome?.value,
        totalAsset: fundamentals?.totalAsset?.value,
        revenue: fundamentals?.revenue?.value,
        earningBeforeInterestAndTaxes: fundamentals?.ebit?.value,
        operatingProfit: fundamentals?.operatingProfit?.value,
        currency: "BDT",
      },
      fairValue: {
        priceToCashFlowRatio: pcf?.toFixed(2),
        NetOperatingCashFlowPerShare:
          fundamentals?.nocfpsQuarterly?.value?.toFixed(2),
        dividendInPercentage: cashDividend,
        currentPrice: price,
        currency: "BDT",
      },
    };
  };

  const getData = async (queryType: string, dataTitle: string) => {
    try {
      if (!doc) return;

      if (data[queryType][languageAlignment]) {
        doc.getElementById("content").innerHTML = marked.parse(
          data[queryType][languageAlignment]
        );
        return;
      }

      doc.getElementById("content").innerHTML = marked.parse(
        "*Please wait... AI model is generating data...*"
      );

      const queryBody: any = getQueryDataBody();

      const res: any = await fetch(`/api/aiGeneratedInsight`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          tradingCode: tradingCode,
          queryType,
          dataTitle,
          dataField: queryType + languageAlignment,
          language: languageAlignment,
          isDataFeed: true,
          data: queryBody[dataTitle],
        }),
      });
      const apiRes = await res.json();

      if (res.ok) {
        setdata((state: any) => ({
          ...state,
          [queryType]: {
            ...state[queryType],
            [languageAlignment]: apiRes.content,
          },
        }));
        doc.getElementById("content").innerHTML = marked.parse(apiRes.content);
      } else {
        doc.getElementById("content").innerHTML = marked.parse(
          "Something went wrong"
        );
      }
    } catch (error) {
      if (doc) {
        doc.getElementById("content").innerHTML = marked.parse(
          "Something went wrong"
        );
      }
    }
  };

  useEffect(() => {
    const { queryType, dataTitle } = options.find(
      (item: any) => item.queryType == alignment
    );
    getData(queryType, dataTitle);
  }, [alignment, languageAlignment]);

  useEffect(() => {
    if (doc) {
      doc.getElementById("content").innerHTML = marked.parse(
        initdata["general"]["En"]
      );
    }
  }, [doc]);

  useEffect(() => {
    if (window?.document) {
      setDoc(window.document);
    }
  }, []);

  return (
    <Box sx={{ pt: { xs: 0, md: 2 }, pb: { xs: 0, md: 2 }, width: "100%" }}>
      <Box
        sx={{
          maxWidth: 700,
          mx: "auto",
          py: 2,
          display: auth?.isPremiumEligible ? "none" : "block",
        }}
      >
        <PremiumDialogContent variant="outlined" />
      </Box>
      <Box
        sx={{
          maxWidth: 950,
          mx: "auto",
          bgcolor: "secondaryBackground",
          pl: { xs: 2, md: 4 },
          pr: { xs: 2, md: 4 },
          pb: { xs: 3, md: 3 },
          pt: { xs: 3, md: 4 },
          borderRadius: { xs: 0, md: 2 },
          display: auth?.isPremiumEligible ? "flex" : "none",
        }}
      >
        <Grid container columnSpacing={5}>
          <Grid item xs={12} md={3}>
            <Box sx={{ mb: { xs: 1.5, md: 3 } }}>
              <Typography
                sx={{ color: "text.secondary", mb: { xs: 1, md: 1 } }}
              >
                Select language:
              </Typography>

              <Paper
                variant="outlined"
                sx={{
                  width: 163,
                  bgcolor: "secondaryBackground",
                }}
              >
                <StyledLanguageToggleButtonGroup
                  size="small"
                  value={languageAlignment}
                  exclusive
                  onChange={handleLanguageAlignmentChange}
                  aria-label="text alignment"
                >
                  <StyledLanguageToggleButton
                    value="En"
                    sx={{ py: 0, fontWeight: 600 }}
                  >
                    English
                  </StyledLanguageToggleButton>
                  <StyledLanguageToggleButton
                    value="Bn"
                    sx={{
                      py: 0,
                      fontFamily: '"Noto Sans Bengali", sans-serif',
                      fontSize: "1rem",
                      fontWeight: 600,
                    }}
                  >
                    বাংলা
                  </StyledLanguageToggleButton>
                </StyledLanguageToggleButtonGroup>
              </Paper>
            </Box>

            <Box>
              <Typography
                sx={{ color: "text.secondary", mb: { xs: 1, md: 1.3 } }}
              >
                Select analysis type:
              </Typography>
              <StyledToggleButtonGroup
                size="small"
                value={alignment}
                exclusive
                onChange={handleAlignmentChange}
                orientation={matchesMdUp ? "vertical" : "horizontal"}
                sx={{
                  display: "flex",
                  flexWrap: "wrap",
                  justifyContent: "flex-start",
                  alignItems: "flex-start",
                }}
              >
                {options
                  .filter((item: any) => item.queryType != "general")
                  .map((item: any, index: number) => (
                    <StyledToggleButton
                      key={index}
                      value={item.queryType}
                      sx={{
                        px: { xs: 1.5, md: 2 },
                        py: { xs: 0.5, md: 0.7 },
                        mb: { xs: 1.3, md: 1.3 },
                        mr: { xs: 1.5, md: 0 },
                        width: { xs: "inherit", md: "100%" },
                        fontSize: { xs: ".85rem", md: ".9rem" },
                      }}
                    >
                      {matchesMdUp ? item.buttonText : item.buttonTextSmall}
                    </StyledToggleButton>
                  ))}
              </StyledToggleButtonGroup>
            </Box>
          </Grid>

          <Grid item xs={12} md={9}>
            <Paper
              variant="outlined"
              sx={{
                // px: 3,
                // py: 2,
                mt: { xs: 1, md: 0 },
                bgcolor: "transparent",
                borderRadius: 3,
                minHeight: { xs: 320, md: 354 },
              }}
            >
              <Box sx={{ px: { xs: 2, md: 3 }, py: 1.5 }}>
                <Typography sx={{ fontSize: "1.5rem", fontWeight: 700 }}>
                  AI Based Stock Insight
                </Typography>
              </Box>
              <Divider />
              <Box
                id="content"
                sx={{
                  px: { xs: 2, md: 3 },
                  pt: 2,
                  pb: 2,
                  fontSize: languageAlignment == "Bn" ? "1rem" : ".875rem",
                  fontFamily:
                    languageAlignment == "Bn"
                      ? '"Noto Sans Bengali", sans-serif'
                      : "'Poppins', sans-serif",
                }}
              ></Box>
            </Paper>
          </Grid>
        </Grid>
      </Box>
    </Box>
  );
}
